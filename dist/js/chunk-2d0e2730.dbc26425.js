(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0e2730"],{"7f6a":function(t,s,r){"use strict";r.r(s);var e=function(){var t=this,s=t.$createElement;t._self._c;return t._m(0)},c=[function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("section",[r("h2",[t._v("1、浏览器工作流程")]),r("p",[t._v("构建DOM -> 构建CSSOM -> 构建渲染树 -> 布局 -> 绘制。")]),r("h4",[t._v("注意：")]),r("p",[t._v("html的解析会被中断，这是因为javascript会阻塞dom的解析。当解析过程中遇到<script>标签的时候，便会停止解析过程，转而去处理脚本，如果脚本是内联的，浏览器会先去执行这段内联的脚本，如果是外链的，那么先会去加载脚本，然后执行。在处理完脚本之后，浏览器便继续解析HTML文档。同时javascript的执行会受到标签前面样式文件的影响。如果在标签前面有样式文件，需要样式文件加载并解析完毕后才执行脚本。这是因为javascript可以查询对象的样式。")]),r("h2",[t._v("2、JS的加载、解析与执行会阻塞DOM的构建与渲染：")]),r("p",[t._v("浏览器的GUI渲染线程与JS引擎线程是互斥的，在构建DOM过程中遇到了<script>就停止构建，转而进行js的加载、解析和执行，然后再从中断的地方恢复DOM构建；")]),r("h2",[t._v("3、CSSOM会阻塞渲染，只有当CSSOM构建完毕后才会进入下一个阶段构建渲染树。")]),r("h2",[t._v("4、带defer或async属性的情况")]),r("p",[t._v("通常情况下DOM和CSSOM是并行构建的，但是当浏览器遇到一个不带defer或async属性的script标签时，DOM构建将暂停，如果此时又恰巧浏览器尚未完成CSSOM的下载和构建，由于JavaScript可以修改CSSOM，所以需要等CSSOM构建完毕后再执行JS，最后才重新DOM构建。")]),r("h2",[t._v("5、普通script、async、defer")]),r("h3",[t._v('1）、<script src="script.js"><\/script>')]),r("p",[t._v("浏览器会立即加载并执行指定的脚本，也就是说不等待后续载入的文档元素，读到就加载并执行。")]),r("h3",[t._v('2）、<script async src="script.js"><\/script> (异步下载)')]),r("p",[t._v("async属性表示异步执行引入的JavaScript，js下载和html解析并行是异步的，如果已经js加载好，就会开始执行，async-script 可能在 DOMContentLoaded 触发之前或之后执行，但一定在 load 触发之前执行")]),r("h3",[t._v('3）、<script defer src="script.js"><\/script>(延迟执行)')]),r("p",[t._v("defer属性表示延迟执行引入的JavaScript，js下载和html解析并行，等到整个 document解析完且defer-script 也加载完成之后（这两件事情的顺序无关），会执行所有由 defer-script 加载的JavaScript代码，然后触发 DOMContentLoaded 事件。")]),r("p",[t._v("PS：在加载多个JS脚本的时候，async是无顺序的加载，而defer是有顺序的加载。\n当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。")]),r("h2",[t._v("6、基于渲染原理可以进行优化：")]),r("ul",[r("li",[t._v("<script> 标签加上 defer属性 和 async属性 用于在不阻塞页面文档解析的前提下，控制脚本的下载和执行。")]),r("li",[t._v("defer属性： 用于开启新的线程下载脚本文件，并使脚本在文档解析完成后执行。")]),r("li",[t._v("async属性： HTML5新增属性，用于异步下载脚本文件，下载完毕立即解释执行代码。")]),r("li",[t._v("CSS优化： "),r("link"),t._v(" 标签的 rel属性 中的属性值设置为 preload 能够让你在你的HTML页面中可以指明哪些资源是在页面加载完成后即刻需要的,最优的配置加载顺序，提高渲染性能。")])]),r("p",[t._v("现代浏览器为了更好的用户体验，在页面渲染过程中会有一个First Paint，它不会等到所有HTML解析之后再开始构建和布局渲染树，可以渲染不完整的dom树和cssom，所以要建议把js放到body后面，假如我们将js放在header，js将阻塞解析dom，从而影响到First Paint，导致First Paint延后。减少了First Paint的时间，但是不会减少DOMContentLoaded被触发的时间")]),r("p",[t._v("参考链接:"),r("br"),r("a",{attrs:{href:"https://mp.weixin.qq.com/s/bFbm1fLZem9xPEdM26J-EQ"}},[t._v("https://mp.weixin.qq.com/s/bFbm1fLZem9xPEdM26J-EQ")]),r("br"),r("a",{attrs:{href:"https://www.cnblogs.com/caizhenbo/p/6679478.html"}},[t._v("https://www.cnblogs.com/caizhenbo/p/6679478.html")])])])}],i=r("2877"),a={},n=Object(i["a"])(a,e,c,!1,null,null,null);s["default"]=n.exports}}]);